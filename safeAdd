#!/usr/bin/env python3

import sys, os, time
from threading import Thread
from src import fuser
from io import BytesIO
import json, base64
# print(fuser.mega_from_json)
MAX_THREADS = 5
if __name__ == "__main__":

	key = open("data/key2.key", "rb").read()
	

	inp =sys.stdin.buffer

	if inp.isatty() or (len(sys.argv) != 2 and len(sys.argv) != 3):
		print("Please pipe data to me. \nEx: echo asdf | /safeadd.py data/files/name_of_output.ext")
	else:
		i = 0

		jso = [0]
		segs = {}
		if sys.argv[-2] == "redo":
			f = open(sys.argv[-1], "r")
			old = json.loads(f.read())
			f.close()

			for x in range(1, len(old)-(MAX_THREADS*2)  ):
				segs[str(x).zfill(10)] = old[x]
				jso[0]+=len(inp.read(fuser.SEGMENT_SIZE))
				i+=1
			
			
			

		try:

			try:
				threads = []
				while len(data := inp.read(fuser.SEGMENT_SIZE)) != 0:
					jso[0]+=len(data)
					nonce = fuser.get_random_bytes(24)

					while len(threads) == MAX_THREADS:
						z = 0
						for t, n, v in threads:
							if not t.is_alive():
								url = t.rjoin()
								segs[str(v).zfill(10)] = [url, base64.b64encode(n).decode("utf-8") ]
								threads.pop(z)
								break
							z+=1
						else:
							time.sleep(0.2)
					while os.path.exists("hold"):
						time.sleep(10)

					tr = fuser.FutureValue(fuser.upload_segment, BytesIO(data), key, nonce )
					threads.append((tr, nonce, i))

					i+=1
			finally:
				while len(threads) != 0:
					t, n, i = threads.pop(0)
					url = t.rjoin()

					segs[str(i).zfill(10)] = [url, base64.b64encode(n).decode("utf-8") ]
		finally:

			f = open(sys.argv[-1], "w")
			f.write(json.dumps(jso + [s for _, s in sorted(segs.items(), key=lambda o: o[0])]  ))
			f.close()
